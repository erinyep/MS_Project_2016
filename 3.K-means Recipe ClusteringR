####Weight with Tf IDF##########
library(tm)
dtm_tfxidf <- weightTfIdf(dtm)

###Prep for K means

m <- as.matrix(dtm_tfxidf)

norm_eucl <- function(m) m/apply(m, MARGIN=1, FUN=function(x) sum(x^2)^.5)

m_norm <- norm_eucl(m)

########Execute K Means###########
set.seed(1234)
cl15 <- kmeans(m_norm, 15)

###add the clusters into the cleaned data frame 

data.clean$cluster <- cl15$cluster

write.csv(data.clean, file = "datawithclusters15.csv")

#######function to look at top cuisines of a cluster#################################
topClusterCuisines <- function(clusterNumber, clusterdf, numofterms = 10){
  myReader1 <- readTabular(mapping=list(content="cuisine", id="recipe"))
  clustdata <- clusterdf[clusterdf$cluster==clusterNumber,]
  clustdata$ingredients <- gsub(",",", ",clustdata$ingredients) 
  clustdata$ingredients <- gsub("_"," ",clustdata$ingredients) 
  cluscorp <- Corpus(DataframeSource(clustdata), readerControl=list(reader=myReader1))
  rcorpclus <- tm_map(cluscorp, removePunctuation)
  clusdtm <- DocumentTermMatrix(rcorpclus)
  clusfreq <- colSums(as.matrix(clusdtm))
  clusord <- order(clusfreq)
  clusfreq[tail(clusord,numofterms)]
}

###########################Function to look at the top terms of a cluster#################################
topClusterTerms <- function(clusterNumber, clusterdf, numofterms = 10){
  myReader1 <- readTabular(mapping=list(content="ingredients", id="recipe"))
  clustdata <- clusterdf[clusterdf$cluster==clusterNumber,]
  clustdata$ingredients <- gsub(",",", ",clustdata$ingredients) 
  clustdata$ingredients <- gsub("_"," ",clustdata$ingredients) 
  cluscorp <- Corpus(DataframeSource(clustdata), readerControl=list(reader=myReader1))
  rcorpclus <- tm_map(cluscorp, removePunctuation)
  clusdtm <- DocumentTermMatrix(rcorpclus)
  clusfreq <- colSums(as.matrix(clusdtm))
  clusord <- order(clusfreq)
  clusfreq[tail(clusord,numofterms)]
}

##############################Function to Recluster results ########################


reCluster <- function(clusterNumber, clusterdf, numofclusters = 5){
  myReader1 <- readTabular(mapping=list(content="ingredients", id="recipe"))
  clustdata <- clusterdf[clusterdf$cluster==clusterNumber,]
  clustdata$ingredients <- gsub(",",", ",clustdata$ingredients) 
  clustdata$ingredients <- gsub("_"," ",clustdata$ingredients) 
  cluscorp <- Corpus(DataframeSource(clustdata), readerControl=list(reader=myReader1))
  rcorpclus <- tm_map(cluscorp, removePunctuation)
  clusdtm <- DocumentTermMatrix(rcorpclus)
  dtm_tfxidf <- weightTfIdf(clusdtm)
  x <- as.matrix(dtm_tfxidf)
  norm_eucl <- function(m) m/apply(m, MARGIN=1, FUN=function(x) sum(x^2)^.5)
  set.seed(1234)
  x_norm <- norm_eucl(x)
  xClus <- kmeans(x_norm, numofclusters)
  clustdata$cluster <- xClus$cluster
  write.csv(clustdata, file = paste("cluster",clusterNumber,"reclus.csv", sep=""))
}


###Run this to check out the leading terms in the clusters
topClusterTerms(8, data.clean ,20)


###Run this to check out the leading cuisines in the clusters
topClusterCuisines(8,data.clean)


#reCluster any clusters that are a 'potluck' of recipies or cuisines. 

##reminder, this out puts as a CSV currently
reCluster(8, data.clean)
reCluster(13, data.clean)


####read back in the reclustered data frames

recluster8 <- read.csv('cluster8reclus.csv')
recluster13 <- read.csv('cluster13reclus.csv')


#####create the data frame for Naive Bayes modeling

dataClusNB <- data.clean

dataClusNB <- dataClusNB[dataClusNB$cluster!=13,]
dataClusNB <- dataClusNB[dataClusNB$cluster!=8,]

prop.table(table(dataClusNB$cluster))

cluster13 <- recluster13[,c(2,3,4,5)]
cluster13$cluster[cluster13$cluster==1] <- 13
cluster13$cluster[cluster13$cluster==2] <- 16
cluster13$cluster[cluster13$cluster==3] <- 17
cluster13$cluster[cluster13$cluster==4] <- 18
cluster13$cluster[cluster13$cluster==5] <- 19

prop.table(table(cluster13$cluster))

cluster8 <- recluster8[,c(2,3,4,5)]
cluster8$cluster[cluster8$cluster==1] <- 8
cluster8$cluster[cluster8$cluster==2] <- 20
cluster8$cluster[cluster8$cluster==3] <- 21
cluster8$cluster[cluster8$cluster==4] <- 22
cluster8$cluster[cluster8$cluster==5] <- 23

dataClusNB <- rbind(cluster13,cluster8,dataClusNB)

prop.table(table(dataClusNB$cluster))
### Create Test and Train Sets

set.seed(123)

sp <- split(dataClusNB, list(dataClusNB$cluster))
samples <- lapply(sp, function(x) x[sample(1:nrow(x), floor(.25*nrow(x)), FALSE),])
out <- do.call(rbind, samples)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(data.clean))

## set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(data.clean)), size = smp_size)
length(unique(train_ind))


train.data <- data.clean[train_ind, ]
test.data <- data.clean[-train_ind, ]
save(train.data, file = "train.data.RDA")
save(test.data, file = "test.data.RDA")

